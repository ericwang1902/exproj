开发步骤：
1.表单：登录 √
2.表单：注册 √
3.管理员：
 3.0 连接数据库； √
 3.1 sysuser数据结构； √
 3.2 后台接口路由；
 3.4 创建管理员账号的seed.js；√
     3.4.0 只存储一次；√
     3.4.1 密码加密存储；√
 3.5 管理员账号登录;
     3.5.0 passport登陆控制；
           3.5.0.0 login的passport验证；√
                   3.5.0.0.1 passport结合connect－falsh、express－message使用。√ 备注：这里主要一个大坑就是要注意在设置session的时候不要启用cookie的secure属性。
           3.5.0.1 登陆授权页面验证；√ 通过编写isLogin中间件来进行相关页面的授权登录。
           3.5.0.2 登出操作；
           3.5.0.3 flash使用；√
     3.5.1 bcryptjs解密登陆验证；√
 3.6 快递员（快递点）管理：
     3.6.1 用户注册功能编写；√
            说明：注册的时候，不管是快递员还是快递代理点，均只进行用户名和密码的注册，注册完成之后，再进行详细的数据设置。
     3.6.2 管理员后台用户管理编写；
           3.6.2.1 用户列表、用户详细资料；
                   3.6.2.1.1 用户列表，分页显示：
                            a. 页面显示分页控件；√
                            b. 页面控件向后台传递点击的页数、每页的数量作为查询条件；√
                            c. 后台传递数据到前台，前台显示数据并显示选择的页面。√
           3.6.2.2 用户设置：类型、组织id、电子免单账号和密码等；
                   3.6.2.2.1 做用户数据修改提交表单
                            a. 快递公司枚举类型、提交验证；通过handlebars的helper来实现选中显示√
                            b. 用户状态枚举类型、提交验证。
           3.6.2.3 在userdetail页面。√
           3.6.2.3 用户充值；
           3.6.2.4 增加enumerableConstants，来表示用户类型。√
4.0 手机页面：地点管理、下单管理；

5.0 微信开发：客户与快递员之间进行关联。


解决问题的记录：
1. objectID为空的情况下，存储出错的解决办法。
答案：赋值为null就可以了。
2. 使用express－validator的自定义验证器。
